package komunikator;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.net.*;
import java.io.File;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
//import javax.swing.JFileChooser;

/**
 *
 * @author Jaroslav Lišiak
 */
public class Client extends javax.swing.JFrame {

    String message; // text spravy
    double fragmentCount; // pocet fragmentov
    int msgSize;    // max. velkost fragmentu
    int chybovost;     // chybovost
    File f;        // subor ktory posielame
    InetAddress host;
    int port = 9003;
    boolean vytvoreneSpojenie = false, needSend, needEnd;
    DatagramSocket sock = null;

    static List<Message> fragmenty = new ArrayList<Message>();
    static List<String> textchunks = new ArrayList<String>();
    static List<byte[]> fragmentySubora = new ArrayList<byte[]>();

    /**
     * Creates new form WIND
     */
    public Client() {
        initComponents();
        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Client");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setResizable(false);

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setSelected(true);
        jRadioButton1.setText("Text");
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setText("Súbor");
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });

        jLabel1.setText("IP adresa:");

        jTextField1.setText("127.0.0.1");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jLabel2.setText("Správa:");

        jLabel3.setText("Súbor:");

        jLabel4.setText("Veľkosť dát:");

        jTextField3.setText("128");
        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });

        jLabel5.setText("B");

        jLabel6.setText("Poradie chybneho segmentu:");

        jTextField4.setText("3");
        jTextField4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField4ActionPerformed(evt);
            }
        });

        jButton1.setText("Odoslať");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Prehľadávať");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel7.setText("Log:");

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 377, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel5))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jRadioButton1)
                                .addGap(18, 18, 18)
                                .addComponent(jRadioButton2))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel2)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton2))
                            .addComponent(jLabel7))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton1)
                    .addComponent(jRadioButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        Refresh();
    }//GEN-LAST:event_jRadioButton1ActionPerformed

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            needSend = true;
            Controller();
        } catch (IOException ex) {
            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InterruptedException ex) {
            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
        Refresh();
    }//GEN-LAST:event_jRadioButton2ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        JFileChooser fc = new JFileChooser();
        fc.showOpenDialog(null);
        f = fc.getSelectedFile();
        jTextField2.setText(f.toString());
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTextField4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField4ActionPerformed
    void Refresh() {
        if (jRadioButton1.isSelected()) {
            jTextField2.setEnabled(false);
            jTextArea1.setEnabled(true);
            jTextArea1.setVisible(true);
        } else {
            jTextField2.setEnabled(true);
            //jTextArea1.setEditable(false);
            jTextArea1.setVisible(false);
        }
    }

    void Controller() throws ClassNotFoundException, IOException, InterruptedException {
        int i = 0;
        System.out.println("VYTVORENE: "+vytvoreneSpojenie + "\nneedSend: "+needSend+"\nneedEnd: "+needEnd);
        while ( i < 3) {
            if (!vytvoreneSpojenie) { // ak este nie je uzatvorene spojenie, vytvorime ho
                echo("Vytvaram spojenie");
                VytvorSpojenie();
            }
            if (vytvoreneSpojenie && needSend) { // mame vytvorene spojenie a chceme odoslat data
                echo("Nasleduje odoslanie");
                Start();
            }
            if (needEnd) {    // ukoncenie spojenia
                echo("Ukoncim spojenie");
                UkonciSpojenie();
            }
            try {
                echo("Cakam 5000 ms");
                Thread.sleep(5000);                 //1000 milliseconds is one second.
            } catch (InterruptedException ex) {
                Thread.currentThread().interrupt();
            }
            if (i < 3) {
                i++;
                echo(i + ": Posielam keep-alive");
                sendKeep_Alive();
            } else {
                echo("Ukoncujem v dosledku dlhej neaktivity");
                UkonciSpojenie();
            }
        }
        // send keep-alive
    }

    void VytvorSpojenie() throws UnknownHostException, SocketException, IOException {
        host = InetAddress.getByName(jTextField1.getText());
        sock = new DatagramSocket();
        Message element = new Message(5);
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        ObjectOutputStream os = new ObjectOutputStream(outputStream);
        os.writeObject(element);
        byte[] b = outputStream.toByteArray();
        DatagramPacket dp = new DatagramPacket(b, b.length, host, port);
        sock.send(dp);
        echo("Vytvoril som spojenie");
        vytvoreneSpojenie = true;
    }

    void Start() throws IOException, ClassNotFoundException {
        message = jTextArea1.getText(); // String nasa sprava
        msgSize = Integer.parseInt(jTextField3.getText()); // max. velkost fragmentu
        fragmentCount = (int) Math.ceil((message.length() / msgSize) + (message.length() % msgSize));      // pocet fragmentov
        chybovost = Integer.parseInt(jTextField4.getText()); //chybovost
        startclient();
    }

    void startclient() throws IOException, ClassNotFoundException {
        int begin = 0, i = 0;
        int end = msgSize;
        String actData;
        int actMesgSize = message.length();
        byte[] sendingData = new byte[1024];
        Iterator tIter = textchunks.iterator();
        i = 0;

        if (jRadioButton1.isSelected()) { // TEXT
            if (actMesgSize > msgSize) {    // sprava je vacsia ako zadna max velkost
                while (i < fragmentCount && end <= message.length()) {
                    actData = message.substring(begin, end);
                    textchunks.add(actData);
                    begin += msgSize;
                    end += msgSize;         // musime rozdelit spravu
                    i++;
                }
                if ((end - message.length()) > 0) {
                    actData = message.substring(begin, message.length());
                    textchunks.add(actData);
                    //echo(actData);
                }

            } else {                      // sprava je dostatocne velka
                actData = message.substring(0, message.length());
                textchunks.add(actData);
            }
            i = 1;
            tIter = textchunks.iterator();
            while (tIter.hasNext()) {
                String element = (String) tIter.next();
                echo(i + " - " + element);
                sendingData = element.getBytes();
                fragmenty.add(new Message(i++, 1, sendingData));
            }
            fragmenty.add(0, new Message(0, 1, msgSize, (int) fragmenty.size()));

        } else {                              // SUBOR
            long fileSize = f.length();
            i = 1;
            byte[] b = new byte[(int) f.length()];
            b = Files.readAllBytes(f.toPath());
            fragmentySubora = divideArray(b, msgSize);
            if ((end - message.length()) > 0) {
                actData = message.substring(begin, message.length());
                textchunks.add(actData);
            }

            int dlzka = fragmentySubora.size();
            for (int p = 0; p < dlzka; p++) {
                sendingData = fragmentySubora.get(p);
                fragmenty.add(new Message(i++, 2, sendingData)); //cislo , 2-subor , data
            }
            sendingData = f.getName().toString().getBytes();
            echo("Subor je: " + f.toString());
            fragmenty.add(0, new Message(0, 2, msgSize, sendingData, (int) fragmenty.size()));
        }
        vypis();
        odosli();
    }

    public void vypis() {
        Iterator StIter = fragmenty.iterator();
        int i = 1;
        while (StIter.hasNext()) {
            Message m = (Message) StIter.next();
            echo("" + i++);
            System.out.print("ID :" + m.ID + "\n\n");
        }
    }

    public void odosli() throws ClassNotFoundException {
        Iterator StIter = fragmenty.iterator();
        int size = fragmenty.size();
        echo("Celkovy pocet fragmentov: " + size);
        boolean odosielam = true;
        int chyb = 0;

        try {

            StIter = fragmenty.iterator();
            while (odosielam && StIter.hasNext()) {
                chyb++;
                Message element = (Message) StIter.next();
                int p = element.ID;
                p++;
                echo("\n\n\nAktualny : " + p + " z: " + fragmenty.size());
                if (chyb == chybovost) {  // posli zly paket
                    echo(chyb + " ---" + chybovost);
                    element.crc = 1;
                    echo("Posielam zly paket s crc: " + element.crc);
                } else {
                    echo("Posielam dobry paket s crc: " + element.crc);
                }
                ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
                ObjectOutputStream os = new ObjectOutputStream(outputStream);
                os.writeObject(element);
                byte[] b = outputStream.toByteArray();

                DatagramPacket dp = new DatagramPacket(b, b.length, host, port);
                sock.send(dp);
                echo("Odoslal som fragment, cakam na odpoved");

                //now receive reply
                //buffer to receive incoming data
                byte[] buffer = new byte[65536];
                DatagramPacket reply = new DatagramPacket(buffer, buffer.length);
                sock.receive(reply);

                echo("Cakam odpoved od servera");
                byte[] data = reply.getData();
                ByteArrayInputStream in = new ByteArrayInputStream(data);
                ObjectInputStream is = new ObjectInputStream(in);
                Odpoved odpoved = (Odpoved) is.readObject();
                echo("Prijal som odpoved");
                if (odpoved.type == 4) { // SPRAVA DOSLA OK
                    echo("Client prijal spravu o dobre dorucenom fragmente");
                    echo(odpoved.id+ "     " + (size - 1));
                    if (odpoved.id == (size - 1)) {
                        odosielam = false;
                        needSend = false;
                        textchunks.clear();
                        fragmenty.clear();
                        echo("Ukoncujem odosielanie, odoslal som vsetky spravy uspesne");
                    }
                } else {  // SPRAVA NEPRISLA OK
                    echo("Client prijal spravu o zle dorucenom fragmente");

                    odosli(odpoved.id);
                }

            }
        } catch (IOException e) {
            System.err.println("IOException " + e);
        }
    }

    public void odosli(int ID) throws ClassNotFoundException {
        echo("Znovu odosielam fragment s ID: " + ID);
        Iterator StIter = fragmenty.iterator();
        try {
            while (StIter.hasNext()) {
                Message element = (Message) StIter.next();
                if (element.ID == ID) {
                    //echo(element.data.toString());
                    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
                    ObjectOutputStream os = new ObjectOutputStream(outputStream);

                    element.crc = Message.getCRC(element.data);
                    echo("Odosielam fragment s CRC: " + element.crc);
                    os.writeObject(element);
                    byte[] b = outputStream.toByteArray();

                    DatagramPacket dp = new DatagramPacket(b, b.length, host, port);
                    sock.send(dp);

                    byte[] buffer = new byte[65536];
                    DatagramPacket reply = new DatagramPacket(buffer, buffer.length);
                    sock.receive(reply);
                    byte[] data = reply.getData();
                    ByteArrayInputStream in = new ByteArrayInputStream(data);
                    ObjectInputStream is = new ObjectInputStream(in);
                    Odpoved odpoved = (Odpoved) is.readObject();
                    echo("Prijal som odpoved");
                    if (odpoved.type == 4) { // SPRAVA DOSLA OK
                        echo("Client prijal spravu o dobre dorucenom fragmente");
                        break;
                    } else {  // SPRAVA NEPRISLA OK
                        echo("Client prijal spravu o zle dorucenom fragmente");

                        odosli(odpoved.id);
                    }
                }
            }
        } catch (IOException e) {
            System.err.println("IOException " + e);
        }
    }
    /*
     public static void echo(String msg) {
     echo(msg);
        
     }
     */

    public static List<byte[]> divideArray(byte[] source, int chunksize) {

        List<byte[]> result = new ArrayList<byte[]>();
        int start = 0;
        while (start < source.length) {
            int end = Math.min(source.length, start + chunksize);
            result.add(Arrays.copyOfRange(source, start, end));
            start += chunksize;
        }

        return result;
    }

    public void echo(String msg) {
        System.out.println("Client: " + msg);
        this.jTextArea2.setText(jTextArea2.getText() + "\n" + msg);
    }

    /**
     * @param args the command line arguments
     */
    /*
     public static void main(String args[]) {
       
     try {
     for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
     if ("Windows Classic".equals(info.getName())) {
     javax.swing.UIManager.setLookAndFeel(info.getClassName());
     break;
     }
     }
     } catch (ClassNotFoundException ex) {
     java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
     } catch (InstantiationException ex) {
     java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
     } catch (IllegalAccessException ex) {
     java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
     } catch (javax.swing.UnsupportedLookAndFeelException ex) {
     java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
     }
     //</editor-fold>

     java.awt.EventQueue.invokeLater(new Runnable() {
     public void run() {
     new Client().setVisible(true);
     }
     });
     }
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    // End of variables declaration//GEN-END:variables

    private void UkonciSpojenie() throws IOException {
        Message element = new Message(6);
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        ObjectOutputStream os = new ObjectOutputStream(outputStream);
        os.writeObject(element);
        byte[] b = outputStream.toByteArray();
        DatagramPacket dp = new DatagramPacket(b, b.length, host, port);
        sock.send(dp);
        echo("Ukoncil som spojenie");
        vytvoreneSpojenie = false;
        fragmenty.clear();
        textchunks.clear();
    }

    private void sendKeep_Alive() throws IOException {
        Message element = new Message(7);   // type = 7 = keep_alive
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        ObjectOutputStream os = new ObjectOutputStream(outputStream);
        os.writeObject(element);
        byte[] b = outputStream.toByteArray();
        DatagramPacket dp = new DatagramPacket(b, b.length, host, port);
        sock.send(dp);
        vynuluj();
        needSend = false;
        echo("Poslal som keep-alive");
        vytvoreneSpojenie = true;
    }
    public void vynuluj(){
        needSend = false;
        message = null;
        fragmentCount = 0;
        msgSize = 0;
        chybovost = 0;
        f = null;
        needEnd = false;
       // sock = null;
        fragmenty.clear();
        textchunks.clear();
        fragmentySubora.clear();
    }
}
