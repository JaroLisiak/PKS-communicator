package komunikator;

import java.io.*;
import java.net.*;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

/**
 *
 * @author Jaroslav Lišiak
 */
public class Server extends javax.swing.JFrame {

    static List<Message> fragmenty = new ArrayList<Message>();
    int max = 0, i = 0, o = 0;
    boolean prijimam = true;
    boolean subor, zleCRC = false;
    short OK;
    int count = 0;
    int presnaVelkost = 0;
    InetAddress host;
    int port = 9003;

    String filename;

    public Server() {
        initComponents();
        this.setVisible(true);
        startServer();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Server");

        jLabel1.setText("Postup spracovania dát serverom:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 479, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 358, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    void startServer() {
        DatagramSocket sock;

        try {
            //1. creating a server socket, parameter is local port number
            sock = new DatagramSocket(9003);

            //buffer to receive incoming data
            byte[] buffer = new byte[65536];
            DatagramPacket incoming = new DatagramPacket(buffer, buffer.length);

            //2. Wait for an incoming data
            echo("Server socket created. Waiting for incoming data...");

            //communication loop
            while (prijimam) {

                if (max > 0) {    // prijima data
                    echo("Prijimam datove spravy");
                    sock.receive(incoming);
                    byte[] data = incoming.getData();
                    host = incoming.getAddress();
                    port = incoming.getPort();
                    ByteArrayInputStream in = new ByteArrayInputStream(data);
                    ObjectInputStream is = new ObjectInputStream(in);
                    try {
                        Message sprava = (Message) is.readObject();
                        //subor = true;
                        OK = 5;
                        echo("CRC spravy " + sprava.crc + " => spravne CRC =>" + Message.getCRC(sprava.data));

                        if (sprava.crc == Message.getCRC(sprava.data)) {
                            zleCRC = false;
                            echo("Dobre CRC");
                            presnaVelkost += sprava.data.length;
                            fragmenty.add(sprava);
                            OK = 4;
                            //echo(new String(sprava.data));
                            count++;
                            echo("Sprava " + sprava.ID + " z :" + max);
                            if (max == count) {
                                echo("Prijal som vsetky spravy: " + count + " z " + max);

                            }
                        } else {
                            zleCRC = true;
                            echo("ZLE CRC");
                        }
                        Odpoved newHead = new Odpoved(sprava.ID, OK); // posli typ 1 - znova hlavicku

                        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
                        ObjectOutputStream os = new ObjectOutputStream(outputStream);
                        os.writeObject(newHead);

                        byte[] odpoved = outputStream.toByteArray();
                        echo("Odosielam odpoved: " + newHead.type);
                        DatagramPacket replyPacket = new DatagramPacket(odpoved, odpoved.length, host, port);
                        sock.send(replyPacket);

                        if (!zleCRC && sprava.ID == max) { /// ak som prijal vsetky fragmenty

                            echo("Prijal som vsetky fragmenty" + sprava.ID + " z " + max);
                            vypis();

                            vynuluj();

                        }

                    } catch (ClassNotFoundException e) {
                        e.printStackTrace();
                    }

                } else {            // Prijima hlavicku
                    echo("Cakam na 1. hlavicku");
                    sock.receive(incoming);
                    echo("Prijal som 1. hlavicku");
                    byte[] data = incoming.getData();

                    ByteArrayInputStream in = new ByteArrayInputStream(data);
                    ObjectInputStream is = new ObjectInputStream(in);

                    try {
                        Message sprava = (Message) is.readObject();
                        OK = 5; // neprislo OK
                        if (sprava.type == 2) {
                            subor = true;
                            echo("Prijal som hlavicku typu subor");

                            if (sprava.crc == Message.getCRC(sprava.data)) {
                                byte[] name = sprava.data;
                                filename = new String(name);
                                max = sprava.maxPocet;
                                OK = 4; //doslo OK
                                count++;
                                echo("Nazov suboru: " + filename);
                                echo("Celkovy pocet fragmentov: " + sprava.maxPocet);
                            }
                        }
                        if (sprava.type == 1) {
                            echo("Prijal som hlavicku typu text");
                            subor = false;
                            max = sprava.maxPocet;
                            OK = 4;
                        }
                        if (sprava.type == 5) {   // vytvorenie spojenia
                            echo("Vytvoril som spojenie");
                            host = incoming.getAddress();
                            port = incoming.getPort();
                            continue;
                        }
                        if (sprava.type == 6) {   // ukoncenie spojeni
                            echo("Ukoncujem spojenie");
                            prijimam = false;
                            break;
                        }
                        if (sprava.type == 7) {
                            echo("Server prijal keep-alive spravu");
                            continue;
                        }
                        System.out.println("Prijal som spravu typu: " + sprava.type);

                        Odpoved newHead = new Odpoved(sprava.ID, OK); // posli typ 1 - znova hlavicku

                        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
                        ObjectOutputStream os = new ObjectOutputStream(outputStream);
                        os.writeObject(newHead);

                        byte[] replyBytea = outputStream.toByteArray();

                        DatagramPacket replyPacket = new DatagramPacket(replyBytea, replyBytea.length, host, port);
                        sock.send(replyPacket);

                    } catch (ClassNotFoundException e) {
                        e.printStackTrace();
                    }

                    //echo the details of incoming data - client ip : client port - client message
                    //echo(incoming.getAddress().getHostAddress() + " : " + incoming.getPort() + " - " + s);
                    //s = "OK : " + s;
                    i++;
                }
            }

            echo(prijimam + " - " + max + "Skoncil som prijimanie");
        } catch (IOException e) {
            System.err.println("IOException " + e);
        }
    }

    //simple function to echo data to terminal
    public void echo(String msg) {
        System.out.println("Server: " + msg);
        this.jTextArea1.setText(jTextArea1.getText() + "\n" + msg);
    }
    /*
     public static void main(String args[]) {
      
     try {
     for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
     if ("Nimbus".equals(info.getName())) {
     javax.swing.UIManager.setLookAndFeel(info.getClassName());
     break;
     }
     }
     } catch (ClassNotFoundException ex) {
     java.util.logging.Logger.getLogger(Serv.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
     } catch (InstantiationException ex) {
     java.util.logging.Logger.getLogger(Serv.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
     } catch (IllegalAccessException ex) {
     java.util.logging.Logger.getLogger(Serv.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
     } catch (javax.swing.UnsupportedLookAndFeelException ex) {
     java.util.logging.Logger.getLogger(Serv.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
     }
     //</editor-fold>

     //Create and display the form 
     java.awt.EventQueue.invokeLater(new Runnable() {
     public void run() {
     new Serv().setVisible(true);
     }
     });
     }
     */

    void vypis() {
        Iterator iterator = fragmenty.iterator();

        if (subor == false) {
            echo("Vypis spravy: \n");
            while (iterator.hasNext()) {
                Message vypis = (Message) iterator.next();
                echo(new String(vypis.data));
            }
        } else {
            int j = 0;
            echo("Vytvorenie suboru: \n");
            byte b[] = new byte[presnaVelkost];

            while (iterator.hasNext()) {
                Message vypis = (Message) iterator.next();
                for (int i = 0; i < vypis.data.length; i++) {
                    b[j++] = vypis.data[i];

                }
            }

            BufferedOutputStream bs = null;

            try {
                echo("Zapisujem do suboru");
                FileOutputStream fs = new FileOutputStream(new File(filename));
                bs = new BufferedOutputStream(fs);
                bs.write(b);
                echo("Subor bol vytvoreny v: " + fs);
                bs.close();
                bs = null;

            } catch (Exception e) {
                e.printStackTrace();
            }

        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

    private void vynuluj() {
        fragmenty.clear();
        max = 0;
        i = 0;
        o = 0;
        count = 0;
        presnaVelkost = 0;
        filename = null;
    }
}
